name: Build, Test, Deploy

on:
  push:
    branches:
      - main

permissions:
  checks: write

env:
  TAG_COMMIT_PATH: ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/${{secrets.ECR_REPO}}:${{github.sha}}
  TAG_BASE: ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/${{secrets.ECR_REPO}}:base-image

jobs:
  build_rails_image:
    name: Build Rails Image
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION}}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: us-east-1
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        run: |
          cd rails_api
          docker pull $TAG_BASE || true
          docker build --cache-from $TAG_BASE -t $TAG_COMMIT_PATH .
          docker push $TAG_COMMIT_PATH
  build_react_artifact:
    name: Build React Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front_end
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm install --quiet
      - name: Generate build
        run: npm run build

      - name: Upload React Artifact
        uses: actions/upload-artifact@v3
        with:
          name: react_build
          path: front_end/build
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [ build_rails_image ]
    env:
      DATABASE_NAME: journal_test
      DATABASE_HOST: localhost
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      RAILS_ENV: test
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: us-east-1
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Checkout
        uses: actions/checkout@v3
      - name: rspec
        run: |
          docker compose up rspec --quiet-pull
          docker cp rspec:/rails_api/rspec.xml ..
          docker compose down
          # if grep -q 'failures="0"' rspec.xml; then echo no rspec errors; exit 0; else echo rspec errors; exit 1; fi
        working-directory: rails_api
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "rspec.xml"

  cdk-diff:
    name: Resource Diff
    needs: [ build_react_artifact, build_rails_image ]
    uses: ./.github/workflows/cdk-diff.yml
    secrets: inherit

  cdk-deploy:
    name: Deploy
    needs: [ cdk-diff]
    uses: ./.github/workflows/cdk-deploy.yml
    secrets: inherit
